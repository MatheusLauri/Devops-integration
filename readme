# API de Integra√ß√£o para Azure DevOps üöÄ

Um servi√ßo .NET 8 constru√≠do para receber, processar e registrar eventos de webhooks do Azure DevOps, focado em capturar o momento exato em que um item de trabalho entra na fase de "In Progress" pela primeira vez.

---

## üìú Descri√ß√£o

Este projeto resolve um problema comum no acompanhamento de projetos: saber quando o trabalho em uma tarefa, bug ou user story realmente come√ßou. Em vez de registrar cada pequena altera√ß√£o, esta API atua como um "porteiro" inteligente que:

- Ouve os eventos de atualiza√ß√£o de itens de trabalho do Azure DevOps.
- Filtra e reage apenas quando um item √© movido para o estado "In Progress".
- Verifica se este √© o primeiro registro daquele item, evitando duplicatas.
- Salva informa√ß√µes ricas sobre o item (ID, T√≠tulo, Descri√ß√£o e o Evento) em um banco de dados SQL Server para futuras an√°lises ou integra√ß√µes.

---

## ‚ú® Funcionalidades Principais

- **Gatilho Inteligente:** A API s√≥ age em eventos relevantes (`workitem.updated` para o estado "In Progress").
- **Preven√ß√£o de Duplicidade:** Garante que cada item de trabalho seja registrado apenas uma vez, na primeira vez que entra em progresso.
- **Extra√ß√£o de Dados Ricos:** Captura n√£o apenas o ID, mas tamb√©m o T√≠tulo e a Descri√ß√£o completos do item de trabalho.
- **Configura√ß√£o Segura:** Utiliza um arquivo `.env` para gerenciar a string de conex√£o do banco de dados, mantendo-a fora do controle de vers√£o.
- **Estrutura Moderna:** Constru√≠do com a arquitetura Minimal API do .NET 8 e Entity Framework Core para acesso a dados.

---

## üõ†Ô∏è Tecnologias Utilizadas

- ASP.NET Core 8
- Entity Framework Core 8
- SQL Server
- Ngrok (para desenvolvimento local)
- Azure DevOps (como fonte dos webhooks)

---

## üöÄ Guia de Instala√ß√£o e Configura√ß√£o

Siga os passos abaixo para ter o projeto rodando em seu ambiente local.

### 1. Pr√©-requisitos

- .NET 8 SDK
- SQL Server (qualquer edi√ß√£o)
- Git
- Ngrok

### 2. Clone o Reposit√≥rio

```bash
git clone https://github.com/MatheusLauri/Devops-integration.git
cd IntegracaoDevOps
```

### 3. Configure o Banco de Dados

A aplica√ß√£o precisa da tabela `TS_UPGDEVOPS` para funcionar. Execute o script SQL abaixo no seu banco de dados:

```sql
CREATE TABLE [dbo].[TS_UPGDEVOPS](
    [PK_ID] [int] IDENTITY(1,1) NOT NULL,
    [DS_US] [nvarchar](max) NULL,
    [DS_EVENTO] [nvarchar](max) NULL,
    [DS_TITULO] [nvarchar](max) NULL,
    [DS_DESCRI√á√ÉO] [nvarchar](max) NULL,
 CONSTRAINT [PK_TS_UPGDEVOPS] PRIMARY KEY CLUSTERED ([PK_ID] ASC)
);
```

### 4. Configure as Vari√°veis de Ambiente

Na raiz do projeto, crie um arquivo chamado `.env` e adicione sua string de conex√£o:

```ini
ConnectionStrings__DefaultConnection="Server=SEU_SERVIDOR;Database=SEU_BANCO;User Id=SEU_USUARIO;Password=SUA_SENHA;TrustServerCertificate=True"
```

### 5. Execute as Migrations do EF Core

Este passo garante que o modelo de c√≥digo est√° sincronizado com o banco (mesmo que j√° tenhamos criado a tabela manualmente).

```bash
dotnet ef database update
```

### 6. Execute a Aplica√ß√£o

```bash
dotnet run
```

Anote a porta em que a aplica√ß√£o est√° rodando (ex: http://localhost:5226).

### 7. Configure o T√∫nel com Ngrok e o Webhook

Em um novo terminal, inicie o Ngrok:

```bash
ngrok http http://localhost:5226
```
(Troque 5226 pela porta correta)

Copie o endere√ßo `https://...` gerado pelo Ngrok.

No Azure DevOps, v√° para **Project Settings > Service Hooks** e crie uma nova inscri√ß√£o ("+").

- **Servi√ßo:** Web Hooks
- **Gatilho (Trigger):** Work item updated
- **Filtros:** Se desejar, filtre por √Årea, Tipo de Item, etc.
- **URL:** Cole o endere√ßo do Ngrok seguido do endpoint:  
  `https://SEU_ENDERECO.ngrok-free.app/api/webhook/userstory-updated`

Clique em **Test** para verificar e em **Finish** para salvar.

---

## ‚öôÔ∏è Como Funciona

O fluxo l√≥gico da aplica√ß√£o √© o seguinte:

```
Azure DevOps (Item movido para "In Progress")
    ‚Üì
Webhook
    ‚Üì
Ngrok
    ‚Üì
API .NET
    ‚Üì
[Filtro 1: O estado √© "In Progress"?]
    ‚Üì
[Filtro 2: O ID j√° existe no banco?]
    ‚Üì
INSERT no SQL Server
```

---

## üéõÔ∏è Detalhes do Endpoint

- **M√©todo:** POST
- **URL:** `/api/webhook/userstory-updated`
- **Corpo (Body):** Espera o payload JSON padr√£o do Azure DevOps para o evento `workitem.updated`.

**Respostas:**
- `200 OK`: A requisi√ß√£o foi recebida com sucesso (mesmo que nenhuma a√ß√£o tenha sido tomada).
- `400 Bad Request`: O JSON recebido √© inv√°lido ou incompleto.
- `500 Internal Server Error`: Ocorreu um erro inesperado no servidor (ex: falha de conex√£o com o banco).

---

## üîÆ Pr√≥ximos Passos e Melhorias

- [ ] Implementar uma camada de Servi√ßo (Service Layer) para separar a l√≥gica de neg√≥cio do Controller.
- [ ] Adicionar autentica√ß√£o ao endpoint para maior seguran√ßa.
- [ ] Criar testes unit√°rios e de integra√ß√£o.
- [ ] Expandir a l√≥gica para lidar com outros estados (ex: "Done", "In QA").
- [ ] Configurar uma pipeline de CI/CD para fazer o deploy autom√°tico para um ambiente na nuvem (como o Azure App Service).